#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018, Joyent, Inc.
# Copyright 2024 MNX Cloud, Inc.
#

#
# Create or delete mock servers to get to the intended number defined by
# `mdata-get mockcloudNumServers`.
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail

# How many times to retry downloading latest agents shar before giving up
agentsshar_retries=5

export PATH=/opt/triton/mockcloud/bin:/opt/triton/mockcloud/build/node/bin:$PATH


# ---- support functions

function fatal
{
    echo "$0: fatal error: $*"
    exit 1
}

function createServer
{
    node /opt/triton/mockcloud/node_modules/cn-agent/lib/backends/dummy/tools/create-server.js
}

function deleteServer
{
    node /opt/triton/mockcloud/node_modules/cn-agent/lib/backends/dummy/tools/delete-server.js "$@"
}


# ---- mainline

# This should match SERVER_ROOT defined in cn-agent
# https://github.com/TritonDataCenter/sdc-cn-agent/blob/master/lib/backends/dummy/common.js#L24
DEFAULT_MOCKCLOUD_ROOT=/data/mockcloud
mockcloudRoot=$(mdata-get mockcloudRoot || true)
if [[ -z "$mockcloudRoot" ]]; then
    mockcloudRoot=$DEFAULT_MOCKCLOUD_ROOT
    mdata-put mockcloudRoot "$mockcloudRoot"
fi
SERVER_ROOT=$mockcloudRoot/servers

DCNAME=$(mdata-get sdc:datacenter_name)
DNSDOMAIN=$(mdata-get dnsDomain)
if [[ -z $DCNAME || -z $DNSDOMAIN ]]; then
    echo "FATAL: must have both DC name and DNS domain" >&2
    exit 2
fi

numServers=$(mdata-get mockcloudNumServers)
numCurrServers=0
if [[ -d $SERVER_ROOT ]]; then
    numCurrServers=$(ls $SERVER_ROOT | wc -l)
fi

if [[ $numServers -eq $numCurrServers ]]; then
    echo "Already have $numServers mock servers"
    exit 0
elif [[ $numServers -gt $numCurrServers ]]; then
    if [[ ! -f /var/tmp/agentsshar-latest.sh ]]; then
        echo "Finding assets IP"
        assets_ip=$(curl -sS http://sapi.$DCNAME.$DNSDOMAIN/services?name=sdc | json -H 0.metadata.assets-ip)
        if [[ -z $assets_ip ]]; then
            echo "FATAL: Unable to determine assets IP" >&2
            exit 2
        else
            echo "Assets IP: $assets_ip"
        fi

        echo "Attempting to download latest agentsshar"
        while [[ ! -f /var/tmp/agentsshar-latest.sh && $agentsshar_retries -gt 0 ]]; do
            curl -o /var/tmp/agentsshar-latest.sh.$$ \
                http://$assets_ip/extra/agents/latest \
                || rm -f /var/tmp/agentsshar-latest.sh.$$
            if [[ $? -eq 0 && -f /var/tmp/agentsshar-latest.sh.$$ ]]; then
                mv /var/tmp/agentsshar-latest.sh.$$ /var/tmp/agentsshar-latest.sh
            fi
            agentsshar_retries=$((agentsshar_retries - 1))
        done
    fi

    echo "Ensuring $numServers mock servers (currently have $numCurrServers)"
    numToCreate=$(( $numServers - $numCurrServers ))
    while [[ $numToCreate -gt 0 ]]; do
        createServer
        numToCreate=$(( $numToCreate - 1 ))
    done
else
    echo "Ensuring $numServers mock servers (currently have $numCurrServers)"
    numToDelete=$(( $numCurrServers - $numServers ))
    while [[ $numToDelete -gt 0 ]]; do
        # Remove the *oldest* server.
        deleteServer "$(ls -t $SERVER_ROOT | tail -1)"
        numToDelete=$(( $numToDelete - 1 ))
    done
fi

# If there is a cn-agent service yet, then restart it.
cnAgentState=$(svcs -Ho fmri cn-agent 2>/dev/null || true)
if [[ -z "$cnAgentState" ]]; then
    true # pass
elif [[ "$cnAgentState" == "maintenance" ]]; then
    echo "Clearing cn-agent service"
    svcadm clear cn-agent
else
    echo "Restarting cn-agent service"
    svcadm restart cn-agent
fi

# Also restart net-agent if it's there.
netAgentState=$(svcs -Ho fmri net-agent 2>/dev/null || true)
if [[ -z "$netAgentState" ]]; then
    true # pass
elif [[ "$netAgentState" == "maintenance" ]]; then
    echo "Clearing net-agent service"
    svcadm clear net-agent
else
    echo "Restarting net-agent service"
    svcadm restart net-agent
fi


exit 0
