#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018, Joyent, Inc.
#

#
# Call this from a test/dev TritonDC headnode GZ to deploy a single mockcloud
# VM.
#
# Usage (prompts for parameters):
#   sh -c $(curl -sSL https://raw.githubusercontent.com/joyent/triton-mockcloud/TRITON-586/tools/mockcloud-deploy)
#
# or:
#   curl -sSL -O https://raw.githubusercontent.com/joyent/triton-mockcloud/TRITON-586/tools/mockcloud-deploy
#   chmod +x ./mockcloud-deploy
#   ./mockcloud-deploy [-y] [-i IMAGE] DEPLOY-SERVER NUM-MOCK-SERVERS
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail


# ---- support functions

function fatal
{
    echo "$0: fatal error: $*"
    exit 1
}


# ---- mainline

[[ $(zonename) == "global" ]] \
    || fatal "This script must run from a TritonDC headnode global zone: zonename=$(zonename)"
[[ $(sysinfo | /usr/bin/json "Boot Parameters.headnode") == "true" ]] \
    || fatal "This script must run from a TritonDC headnode global zone: sysinfo says this is not a headnode"

mockcloudImageChannel=experimental
skipConfirmations=no
mockcloudImage=
deployServer=
numMockServers=

if [[ $# -gt 0 ]]; then
    mockcloudImage=latest
    while getopts "hi:y" opt
    do
        case "$opt" in
            h)
                fatal "TODO: usage"
                exit 0
                ;;
            i) mockcloudImage=$OPTARG
                ;;
            y)
                skipConfirmations=yes
                ;;
            *)
                fatal "TODO: usage"
                exit 1
                ;;
        esac
    done
    shift $(( $OPTIND - 1 ))

    deployServer=$1
    [[ -n "$deployServer" ]] || fatal "missing DEPLOY-SERVER argument"
    numMockServers=$2
    [[ -n "$numMockServers" ]] || fatal "missing NUM-MOCK-SERVERS argument"
else
    echo "This script will deploy a mockcloud VM."
    mockcloudImage=latest
    echo -n " - deploy server (UUID or hostname, defaults to current server): "
    read deployServer
    [[ -z "$deployServer" ]] && deployServer=current
    echo -n " - number of mock servers (default 5): "
    read numMockServers
    [[ -z "$numMockServers" ]] && numMockServers=5
fi

# Gather an validate values
if [[ "$deployServer" == "current" ]]; then
    deployServerUuid=$(sysinfo | json UUID)
else
    deployServerUuid=$(sdc-cnapi /servers/$deployServer | json -H uuid)
    if [[ -z "$deployServerUuid" ]]; then
        deployServerUuid=$(sdc-cnapi /servers?hostname=$deployServer | json -H 0.uuid)
    fi
fi
[[ -n "$deployServerUuid" ]] || fatal "could not find server '$deployServer'"
deployServerHostname=$(sdc-cnapi /servers/$deployServerUuid | json -H hostname)

if [[ -z "$(echo "$numMockServers" | grep -E '^[0-9]+$' || true)" ]]; then
    fatal "number of mock servers value is not an integer: '$numMockServers'"
fi

if [[ "$mockcloudImage" == "latest" ]]; then
    mockcloudImage=$(updates-imgadm -C $mockcloudImageChannel list -H -o uuid --latest name=mockcloud)
fi
mockcloudImageVersion=$(updates-imgadm -C '*' get $mockcloudImage | json version)

# Dump summary
echo ""
echo "Deploying a mockcloud VM:"
echo " - image: $mockcloudImage (mockcloud@$mockcloudImageVersion)"
echo " - deploy server: $deployServerUuid ($deployServerHostname)"
echo " - num mock servers: $numMockServers"

if [[ "$skipConfirmations" != "yes" ]]; then
    echo ""
    echo "Press return to continue / Ctrl+C to abort."
    read
else
    echo ""
fi


# Import the image if necessary.
# TODO: could check and/or suggest 'sdcadm post-setup common-external-nics'
if ! sdc-imgadm get $mockcloudImage >/dev/null 2>&1; then
    echo "Importing mockcloud image (requires IMGAPI external nic)"
    sdc-imgadm import $mockcloudImage -S https://updates.joyent.com?channel=$mockcloudImageChannel
fi

# TODO: Want a '--wait' option on 'sdc-vmadm create'.
ufdsAdminUuid=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
latestAliasN=$(sdc-vmapi "/vms?owner_uuid=$ufdsAdminUuid&alias=mockcloud" | json -Ha alias | cut -c10- | sort -n | tail -1 || echo "-1")
alias=mockcloud$(( $latestAliasN + 1 ))
echo "Creating VM $alias on server $deployServerUuid"
echo "(assumes 'sample-4G package from 'sdcadm post-setup dev-sample-data')"
sdc-vmadm create <<EOP
{
    "alias": "$alias",
    "brand": "joyent-minimal",
    "owner_uuid": "$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)",
    "billing_id": "$(sdc-papi /packages?name=sample-4G | json -H 0.uuid)",
    "networks": [
        {"uuid": "$(sdc-napi /networks?name=admin | json -H 0.uuid)"}
    ],
    "server_uuid": "$deployServerUuid",
    "image_uuid": "$mockcloudImage",
    "delegate_dataset": true,
    "customer_metadata": {
        "user-script": "/opt/smartdc/boot/setup.sh",
        "ufdsAdmin": "$(sdc-sapi /applications?name=sdc | json -H 0.metadata.ufds_admin_uuid)",
        "dnsDomain": "$(sdc-sapi /applications?name=sdc | json -H 0.metadata.dns_domain)",
        "mockcloudNumServers": $numMockServers
    }
}
EOP

