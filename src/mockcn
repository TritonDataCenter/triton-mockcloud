#!/bin/bash
#
# This script exists to create a VM to host mock CNs. Usage is:
#
# ./mockcn <alias>
#
# Where alias will be the alias of the new zone. If a VM already exists with
# the chosen alias, the script will abort.
#

if [[ -n ${TRACE} ]]; then
    set -o xtrace
fi
set -o errexit

# Figure out the alias we should used (passed in or default)
zone_alias=$1
if [[ -z ${zone_alias} ]]; then
    echo "Usage: $0 <alias>" >&2
    exit 1
fi

if [[ -n $(vmadm lookup -1 alias="${zone_alias}") ]]; then
    echo "VM with alias ${zone_alias} already exists, aborting." >&2
    exit 1
fi

# Add source
imgadm sources -a https://updates.joyent.com/

# Import latest image
echo "Importing latest mockcn image..."
IMAGE_UUID=$(imgadm avail | grep mockcn | tail -1 | cut -d ' ' -f 1)
imgadm import ${IMAGE_UUID}

# We assume owner of admin network is also the admin user.
#napi_data=$(sdc-napi /networks?name=admin | json -Ha uuid owner_uuids.0)
read ADMIN_NET_UUID OWNER_UUID < <(sdc-napi /networks?name=admin | json -Ha uuid owner_uuids.0)
TMP_PAYLOAD=/tmp/payload.0.$$
USER_SCRIPT=/tmp/user_script.$$
VM_UUID=$(/usr/bin/uuid -v4)

if [[ -z ${ADMIN_NET_UUID} ]]; then
    echo "Unable to determine 'admin' network."
    exit 1
fi

if [[ -z ${OWNER_UUID} ]]; then
    echo "Unable to determine owner of 'admin' network."
fi

netobj=$((sdc-napi /networks/${ADMIN_NET_UUID}/nics -X POST -d @/dev/stdin \
    | json -H -e 'this.belongs_to_type=undefined' \
        -e 'this.belongs_to_uuid=undefined' \
        -e 'this.network_uuid=undefined' \
        -e 'this.owner_uuid=undefined' \
        -e 'this.allow_mac_spoofing=true' \
        -e 'this.allow_ip_spoofing=true' \
        -e 'this.allow_dhcp_spoofing=true') \
    < <(cat <<EOF
{
    "owner_uuid": "${OWNER_UUID}",
    "belongs_to_uuid": "${VM_UUID}",
    "belongs_to_type": "zone",
    "primary": true
}
EOF
))

mock_oui=$(printf "02:%02x:%02x" $(($RANDOM % 256)) $(($RANDOM % 256)))

echo "Creating VM..."
vmadm create <<EOF
{
 "brand": "joyent-minimal",
 "quota": 20,
 "image_uuid": "${IMAGE_UUID}",
 "ram": 1536,
 "archive_on_delete": true,
 "alias": "${zone_alias}",
 "customer_metadata": {
     "mock_oui": "${mock_oui}",
     "rabbitmq": "guest:guest:10.99.99.20:5672",
     "user-script": "#!/bin/bash\n\nset -o xtrace\nset -o errexit\n\nexec /opt/smartdc/mockcn/bin/init.sh\n\n# exec failed if we got this far.\nexit 2\n"
 },
 "nics": [
   ${netobj}
 ]
}
EOF

